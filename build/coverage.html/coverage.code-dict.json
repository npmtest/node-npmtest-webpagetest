{"/home/travis/build/npmtest/node-npmtest-webpagetest/test.js":"/* istanbul instrument in package npmtest_webpagetest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpagetest/lib.npmtest_webpagetest.js":"/* istanbul instrument in package npmtest_webpagetest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webpagetest = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webpagetest = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webpagetest/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webpagetest && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webpagetest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webpagetest\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webpagetest.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webpagetest.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webpagetest.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webpagetest.__dirname + '/lib.npmtest_webpagetest.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpagetest/node_modules/webpagetest/lib/webpagetest.js":"/**\n * Copyright (c) 2013, Twitter Inc.\n * Copyright (c) 2015, Google Inc.\n * Copyright (c) 2015, Marcel Duran and other contributors\n * Released under the MIT License\n */\n\nvar http    = require('http'),\n    https   = require('https'),\n    url     = require('url'),\n    path    = require('path'),\n    zlib    = require('zlib'),\n    specs   = require('./specs'),\n    helper  = require('./helper'),\n    server  = require('./server'),\n    mapping = require('./mapping');\n\nvar reSpace = /\\s/,\n    reConnectivity = /^(?:Cable|DSL|FIOS|Dial|3G|3GFast|Native|custom)$/,\n    reHTMLOutput = /<h\\d[^<]*>([^<]+)<\\/h\\d>/; // for H3 on cancelTest.php\n\nvar paths = {\n  testStatus: 'testStatus.php',\n  testResults: 'jsonResult.php',\n  locations: 'getLocations.php',\n  testers: 'getTesters.php',\n  test: 'runtest.php',\n  gzip: 'getgzip.php',\n  har: 'export.php',\n  waterfall: 'waterfall.php',\n  thumbnail: 'thumbnail.php',\n  cancel: 'cancelTest.php',\n  history: 'testlog.php',\n  videoCreation: 'video/create.php',\n  videoView: 'video/view.php',\n  googleCsi: 'google/google_csi.php',\n  responseBody: 'response_body.php',\n  timeline: 'getTimeline.php'\n};\n\nvar filenames = {\n  pageSpeed: 'pagespeed.txt',\n  utilization: 'progress.csv',\n  request: 'IEWTR.txt',\n  netLog: 'netlog.txt',\n  chromeTrace: 'trace.json',\n  consoleLog: 'console_log.json',\n  testInfo: 'testinfo.json',\n  history: 'history.csv',\n  waterfall: 'waterfall.png',\n  screenshot: 'screen.jpg',\n  screenshotStartRender: 'screen_render.jpg',\n  screenshotDocumentComplete: 'screen_doc.jpg',\n  screenshotFullResolution: 'screen.png',\n  cached: '_Cached'\n};\n\n// GET helper function\nfunction get(config, pathname, proxy, callback, encoding) {\n  var protocol = (config.protocol === 'https:' ? https : http),\n      options;\n\n  if (proxy) {\n    var pathForProxy = config.protocol + '//';\n\n    if (config.auth) {\n      pathForProxy += config.auth + '@';\n    }\n\n    pathForProxy += config.hostname + ':' + config.port + pathname;\n\n    options = {\n      host: proxy.split(':')[0],\n      port: proxy.split(':')[1],\n      path: pathForProxy,\n      headers: {\n        Host: config.hostname\n      }\n    };\n  } else {\n    options = {\n      path: pathname,\n      host: config.hostname,\n      auth: config.auth,\n      port: config.port,\n      headers: {}\n    };\n  }\n\n  if (encoding !== 'binary') {\n    options.headers['accept-encoding'] = 'gzip,deflate';\n  }\n\n  return protocol.get(options, function getResponse(res) {\n    var data, length,\n        statusCode = res.statusCode;\n\n    if (statusCode !== 200) {\n      callback(\n        new helper.WPTAPIError(statusCode, http.STATUS_CODES[statusCode])\n      );\n    } else {\n      data = [];\n      length = 0;\n\n      encoding = res.headers['content-encoding'] || encoding || 'uft8';\n\n      res.on('data', function onData(chunk) {\n        data.push(chunk);\n        length += chunk.length;\n      });\n\n      res.on('end', function onEnd() {\n        var i, len, pos,\n            buffer = new Buffer(length),\n            type = (res.headers['content-type'] || '').split(';')[0];\n\n        for (i = 0, len = data.length, pos = 0; i < len; i += 1) {\n          data[i].copy(buffer, pos);\n          pos += data[i].length;\n        }\n\n        if (encoding === 'gzip' || encoding === 'deflate') {\n          // compressed response (gzip,deflate)\n          zlib.unzip(buffer, function unzip(err, buffer) {\n            if (err) {\n              callback(err);\n            } else {\n              callback(undefined, buffer.toString(), {\n                type: type,\n                encoding: encoding\n              });\n            }\n          });\n        } else {\n          // uncompressed response\n          callback(undefined, buffer, {\n            type: type,\n            encoding: encoding\n          });\n        }\n      });\n    }\n  }).on('error', function onError(err) {\n    callback(err);\n  });\n}\n\n// execute callback properly normalizing optional args\nfunction callbackYield(callback, err, data, options) {\n  if (typeof callback === 'function') {\n    callback.apply(callback, [err, data].concat(options.args));\n  }\n}\n\n// helper for async parser callback\nfunction asyncParserCallback(options, err, data) {\n  callbackYield(this, err, data, options);\n}\n\n// WPT API call wrapper\nfunction api(pathname, callback, query, options) {\n  var config;\n\n  options = options || {};\n\n  // check server override\n  if (options.server) {\n    config = helper.normalizeServer(options.server);\n  } else {\n    config = this.config;\n  }\n\n  pathname = url.format({\n    pathname: url.resolve(config.pathname, pathname),\n    query: query\n  });\n\n  if (options.dryRun) {\n\n    // dry run: return the API url (string) only\n    if (typeof callback === 'function') {\n      callback.apply(callback,\n        [undefined, helper.dryRun(config, pathname)]\n      );\n    }\n\n  } else {\n\n    // make the real API call\n    get.call(this, config, pathname, options.proxy, function apiCallback(err, data, info) {\n      if (!err) {\n        try {\n          if (options.parser) {\n            // async parser\n            if (options.parser.async) {\n              return options.parser(data,\n                asyncParserCallback.bind(callback, options));\n            } else {\n              data = options.parser(data);\n            }\n          } else {\n            if (!data) {\n              data = {};\n            } else if (info.type === 'application/json') {\n              data = JSON.parse(data);\n            } else if (info.type === 'text/xml') {\n              return helper.xmlToObj(data,\n                asyncParserCallback.bind(callback, options));\n            } else if (info.type === 'text/html') {\n              data = {result: (reHTMLOutput.exec(data) || [])[1]};\n            } else if (info.type === 'text/plain') {\n              data = {result: data.toString()};\n            }\n          }\n        } catch (ex) {\n          err = ex;\n        }\n      }\n\n      callbackYield(callback, err, data, options);\n    }.bind(this), options.encoding);\n\n  }\n\n  // chaining\n  return this;\n}\n\n// Set the appropriate filename to be requested\nfunction setFilename(input, options, doNotDefault) {\n  var run, cached;\n\n  options = options || {};\n\n  // set run and cached with or without defaults\n  run = parseInt(options.run || options.r, 10) ||\n    (doNotDefault ? undefined : 1);\n  cached = (options.repeatView || options.cached || options.c) ?\n    filenames.cached : '';\n  // when falsy, check set default accordingly\n  if (doNotDefault && !cached) {\n    cached = ['repeatView', 'cached', 'c'].some(function(key) {\n      return key in options;\n    }) ? '' : undefined;\n  }\n\n  if (typeof input === 'string') {\n    return run + cached + '_' + input;\n  } else {\n    if (run !== undefined) {\n      input.run = run;\n    }\n    if (cached !== undefined) {\n      input.cached = cached ? 1 : 0;\n    }\n    return input;\n  }\n}\n\n// Methods\n\nfunction getTestStatus(id, options, callback) {\n  var query = {test: id};\n\n  callback = callback || options;\n  options = options === callback ? undefined : options;\n  helper.setQuery(mapping.commands.status, options, query);\n\n  return api.call(this, paths.testStatus, callback, query, options);\n}\n\nfunction getTestResults(id, options, callback) {\n  var query = {test: id};\n\n  callback = callback || typeof options === 'function' && options;\n  options = options === callback ? {} : options || {};\n  helper.setQuery(mapping.commands.results, options, query);\n\n  // specs\n  if (options.specs && !options.dryRun) {\n    return api.call(this, paths.testResults,\n      specs.bind(this, options.specs, options.reporter, callback),\n      query, options\n    );\n  }\n\n  return api.call(this, paths.testResults, callback, query, options);\n}\n\nfunction getLocations(options, callback) {\n  callback = callback || options;\n  options = options === callback ? undefined : options;\n\n  var query = helper.setQuery(mapping.commands.locations, options);\n\n  return api.call(this, paths.locations, callback, query, options);\n}\n\nfunction getTesters(options, callback) {\n  callback = callback || options;\n  options = options === callback ? undefined : options;\n\n  var query = helper.setQuery(mapping.commands.testers, options);\n\n  return api.call(this, paths.testers, callback, query, options);\n}\n\nfunction runTest(what, options, callback) {\n  var query = {};\n\n  callback = callback || options;\n  options = options === callback ? {} : options;\n\n  // testing url or script?\n  query[reSpace.test(what) ? 'script' : 'url'] = what;\n  // set dummy url when scripting, needed when webdriver script\n  if (query.script) {\n    query.url = 'http://www.webpagetest.org';\n  }\n  helper.setQuery(mapping.commands.test, options, query);\n\n  // connectivity\n  if (reConnectivity.test(options.connectivity) && query.location) {\n    query.location += ('.' + options.connectivity);\n  }\n\n  // json output format\n  query.f = 'json';\n\n  // API key\n  if (!query.k && this.config.key) {\n    query.k = this.config.key;\n  }\n\n  // synchronous tests with results\n  var testId, polling, server, listen, timerout,\n      resultsOptions = {};\n\n  function resultsCallback(err, data) {\n    clearTimeout(timerout);\n    if (options.exitOnResults) {\n      process.exit(err);\n    } else {\n      callback(err, data);\n    }\n  }\n\n  function poll(err, data) {\n    // poll again when test started but not complete\n    // and not when specs are done testing\n    if (!err && (!data || data && data.data &&\n        data.statusCode !== 200) &&\n        !(typeof err === 'number' && data === undefined)) {\n      polling = setTimeout(getTestResults.bind(this, testId,\n        resultsOptions, poll.bind(this)), options.pollResults);\n    } else {\n      resultsCallback(err, data);\n    }\n  }\n\n  function testCallback(cb, err, data) {\n    if (err || !(data && data.data && data.data.testId)) {\n      return callback(err || data);\n    }\n\n    testId = data.data.testId;\n\n    if (options.timeout) {\n      timerout = setTimeout(timeout, options.timeout);\n    }\n\n    if (cb) {\n      cb.call(this);\n    }\n  }\n\n  function timeout() {\n    if (server) {\n      server.close();\n    }\n    clearTimeout(polling);\n    callback({\n      error: {\n        code: 'TIMEOUT',\n        testId: testId,\n        message: 'timeout'\n      }\n    });\n  }\n\n  function listener() {\n    query.pingback = url.format({\n      protocol: 'http',\n      hostname: options.waitResults.hostname,\n      port: options.waitResults.port,\n      pathname: '/testdone'\n    });\n\n    api.call(this, paths.test, testCallback.bind(this, null), query, options);\n  }\n\n  function wait() {\n    server.listen(options.waitResults.port, listen);\n    return options.waitResults;\n  }\n\n  // poll|wait results timeout\n  if (options.timeout) {\n    options.timeout = (parseInt(options.timeout, 10) || 0) * 1000;\n  }\n\n  // poll|wait results options\n  Object.keys(mapping.options.results).forEach(function resultsOpts(key) {\n    var name = mapping.options.results[key].name,\n        value = options[name] || options[key];\n\n    if (value !== undefined) {\n      resultsOptions[name] = value;\n    }\n  });\n\n  // poll results\n  if (options.pollResults && !options.dryRun) {\n    options.pollResults = parseInt(options.pollResults * 1000, 10) || 5000;\n\n    return api.call(this, paths.test, testCallback.bind(this, poll),\n      query, options);\n  }\n\n  // wait results\n  if (options.waitResults && !options.dryRun) {\n\n    options.waitResults = helper.localhost(options.waitResults,\n      WebPageTest.defaultWaitResultsPort);\n\n    listen = listener.bind(this);\n\n    server = http.createServer(function(req, res) {\n      var uri = url.parse(req.url, true);\n\n      res.statusCode = 204;\n      res.end();\n\n      if (uri.pathname === '/testdone' && uri.query.id === testId) {\n        server.close(getTestResults.bind(this, uri.query.id,\n          resultsOptions, resultsCallback));\n      }\n    }.bind(this));\n\n    server.on('error', function(err) {\n      if (['EACCES', 'EADDRINUSE'].indexOf(err.code) > -1) {\n        // remove old unused listener and bump port for next attempt\n        server.removeListener('listening', listen);\n        options.waitResults.port++;\n        wait.call(this);\n      } else {\n        callback(err);\n      }\n    }.bind(this));\n\n    return wait.call(this);\n  }\n\n  return api.call(this, paths.test, callback, query, options);\n}\n\nfunction cancelTest(id, options, callback) {\n  var query = {test: id};\n\n  callback = callback || options;\n  options = options === callback ? undefined : options;\n\n  helper.setQuery(mapping.commands.cancel, options, query);\n\n  return api.call(this, paths.cancel, callback, query, options);\n}\n\nfunction getPageSpeedData(id, options, callback) {\n  callback = callback || options;\n  options = options === callback ? undefined : options;\n\n  return api.call(this, paths.gzip, callback, {\n    test: id,\n    file: setFilename(filenames.pageSpeed, options)\n  }, options);\n}\n\nfunction getHARData(id, options, callback) {\n  callback = callback || options;\n  options = options === callback ? undefined : options;\n\n  return api.call(this, paths.har, callback, {test: id}, options);\n}\n\nfunction getUtilizationData(id, options, callback) {\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.parser = options.parser || helper.csvToObj;\n\n  return api.call(this, paths.gzip, callback, {\n    test: id,\n    file: setFilename(filenames.utilization, options)\n  }, options);\n}\n\nfunction getRequestData(id, options, callback) {\n  callback = callback || options;\n  options = options === callback ? {} : options;\n\n  options.parser = options.parser || helper.tsvToObj.bind(null, [\n    '', '', '', 'ip_addr', 'method', 'host', 'url', 'responseCode', 'load_ms',\n    'ttfb_ms', 'load_start', 'bytesOut', 'bytesIn', 'objectSize', '', '',\n    'expires', 'cacheControl', 'contentType', 'contentEncoding', 'type',\n    'socket', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'score_cache', 'score_cdn', 'score_gzip', 'score_cookies',\n    'score_keep-alive', '', 'score_minify', 'score_combine', 'score_compress',\n    'score_etags', '', 'is_secure', 'dns_ms', 'connect_ms', 'ssl_ms',\n    'gzip_total', 'gzip_save', 'minify_total', 'minify_save', 'image_total',\n    'image_save', 'cache_time', '', '', '', 'cdn_provider', 'dns_start',\n    'dns_end', 'connect_start', 'connect_end', 'ssl_start', 'ssl_end',\n    'initiator', 'initiator_line', 'initiator_column']);\n\n  return api.call(this, paths.gzip, callback, {\n    test: id,\n    file: setFilename(filenames.request, options)\n  }, options);\n}\n\nfunction getTimelineData(id, options, callback) {\n  var query;\n\n  callback = callback || options;\n  options = options === callback ? undefined : options;\n  query = setFilename({test: id}, options, true);\n\n  return api.call(this, paths.timeline, callback, query, options);\n}\n\nfunction getNetLogData(id, options, callback) {\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.parser = options.parser || helper.netLogParser;\n\n  return api.call(this, paths.gzip, callback, {\n    test: id,\n    file: setFilename(filenames.netLog, options)\n  }, options);\n}\n\nfunction getChromeTraceData(id, options, callback) {\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.parser = options.parser || helper.netLogParser;\n\n  return api.call(this, paths.gzip, callback, {\n    test: id,\n    file: setFilename(filenames.chromeTrace, options)\n  }, options);\n}\n\nfunction getConsoleLogData(id, options, callback) {\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.parser = options.parser || JSON.parse;\n\n  return api.call(this, paths.gzip, callback, {\n    test: id,\n    file: setFilename(filenames.consoleLog, options)\n  }, options);\n}\n\nfunction getTestInfo(id, options, callback) {\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.parser = options.parser || JSON.parse;\n\n  return api.call(this, paths.gzip, callback, {\n    test: id,\n    file: filenames.testInfo\n  }, options);\n}\n\nfunction getHistory(days, options, callback) {\n  var query;\n\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.parser = options.parser || helper.csvParser;\n  query = {\n    all: 'on',\n    f: 'csv',\n    days: days ? parseInt(days, 10) : 1\n  };\n\n  return api.call(this, paths.history, callback, query, options);\n}\n\nfunction getGoogleCsiData(id, options, callback) {\n  var query;\n\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.parser = options.parser || helper.csvParser;\n  query = setFilename({test: id}, options, true);\n\n  return api.call(this, paths.googleCsi, callback, query, options);\n}\n\nfunction getResponseBody(id, options, callback) {\n  var query;\n\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.args = options.args || {\n    type: 'text/plain'\n  };\n  query = setFilename({test: id}, options);\n  query.request = options.request || 1;\n\n  return api.call(this, paths.responseBody, callback, query, options);\n}\n\nfunction getWaterfallImage(id, options, callback) {\n  var query,\n      pathname = paths.waterfall;\n\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  query = setFilename({test: id}, options),\n  options.encoding = options.encoding || 'binary';\n  options.dataURI = options.dataURI || options.uri || options.u;\n  options.parser = options.parser ||\n    (options.dataURI ? helper.dataURI : undefined);\n  options.args = options.args || {\n    type: 'image/png',\n    encoding: options.dataURI ? 'utf8' : options.encoding\n  };\n\n  if (options.thumbnail || options.t) {\n    pathname = paths.thumbnail;\n    query.file = setFilename(filenames.waterfall, options);\n  }\n\n  helper.setQuery(mapping.commands.waterfall, options, query);\n\n  return api.call(this, pathname, callback, query, options);\n}\n\nfunction getScreenshotImage(id, options, callback) {\n  var pathname = paths.gzip,\n      filename = filenames.screenshot,\n      params = {test: id},\n      type = 'jpeg';\n\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  options.encoding = options.encoding || 'binary';\n  options.dataURI = options.dataURI || options.uri || options.u;\n  options.parser = options.parser ||\n    (options.dataURI ? helper.dataURI : undefined);\n\n  if (options.startRender || options.render || options.n) {\n    filename = filenames.screenshotStartRender;\n  } else if (options.documentComplete || options.complete || options.p) {\n    filename = filenames.screenshotDocumentComplete;\n  } else if (options.fullResolution || options.full || options.f) {\n    filename = filenames.screenshotFullResolution;\n    type = 'png';\n  }\n  options.args = options.args || {\n    type: 'image/' + type,\n    encoding: options.dataURI ? 'utf8' : options.encoding\n  };\n\n  params.file = setFilename(filename, options);\n\n  if (options.thumbnail || options.t) {\n    pathname = paths.thumbnail;\n    params = setFilename(params, options);\n  }\n\n  return api.call(this, pathname, callback, params, options);\n}\n\nfunction listen(local, options, callback) {\n  callback = callback || options;\n  options = options === callback ? {} : options;\n  local = helper.localhost(local, WebPageTest.defaultListenPort);\n\n  return server.listen.call(this, local, options, callback);\n}\n\nfunction getEmbedVideoPlayer(id, options, callback) {\n  var params = {\n    embed: 1,\n    id: id\n  };\n\n  options.args = options.args || {\n    type: 'text/html',\n    encoding: options.dataURI ? 'utf8' : options.encoding\n  };\n\n  options.parser = function (data) {\n    return data.toString();\n  };\n\n  api.call(this, paths.videoView, callback, params, options);\n}\n\nfunction createVideo(tests, options, callback) {\n  //prefer the json format because the xml format is buggy with wpt 2.11\n  var params = {\n    tests: tests,\n    f: 'json',\n    end: options.comparisonEndPoint || 'visual'\n  };\n\n  api.call(this, paths.videoCreation, callback, params, options);\n}\n\n// WPT constructor\nfunction WebPageTest(server, key) {\n  if (!(this instanceof WebPageTest)) {\n    return new WebPageTest(server, key);\n  }\n\n  this.config = helper.normalizeServer(server || WebPageTest.defaultServer);\n  this.config.key = key;\n}\n\n// Allow global config override\nWebPageTest.paths = paths;\nWebPageTest.filenames = filenames;\nWebPageTest.defaultServer = 'http://www.webpagetest.org';\nWebPageTest.defaultListenPort = 7791;\nWebPageTest.defaultWaitResultsPort = 8000;\n\n// Version\nObject.defineProperty(WebPageTest, 'version', {\n  value: require('../package.json').version\n});\n\n// Exposed methods\nWebPageTest.scriptToString = helper.scriptToString;\nWebPageTest.prototype = {\n  constructor: WebPageTest,\n  version: WebPageTest.version,\n  getTestStatus: getTestStatus,\n  getTestResults: getTestResults,\n  getLocations: getLocations,\n  getTesters: getTesters,\n  runTest: runTest,\n  cancelTest: cancelTest,\n  getPageSpeedData: getPageSpeedData,\n  getHARData: getHARData,\n  getUtilizationData: getUtilizationData,\n  getRequestData: getRequestData,\n  getTimelineData: getTimelineData,\n  getNetLogData: getNetLogData,\n  getChromeTraceData: getChromeTraceData,\n  getConsoleLogData: getConsoleLogData,\n  getTestInfo: getTestInfo,\n  getHistory: getHistory,\n  getWaterfallImage: getWaterfallImage,\n  getScreenshotImage: getScreenshotImage,\n  getGoogleCsiData: getGoogleCsiData,\n  getResponseBody: getResponseBody,\n  getEmbedVideoPlayer: getEmbedVideoPlayer,\n  createVideo: createVideo,\n  scriptToString: WebPageTest.scriptToString,\n  listen: listen,\n\n  // short aliases\n  status: getTestStatus,\n  results: getTestResults,\n  locations: getLocations,\n  testers: getTesters,\n  test: runTest,\n  cancel: cancelTest,\n  pagespeed: getPageSpeedData,\n  har: getHARData,\n  utilization: getUtilizationData,\n  request: getRequestData,\n  timeline: getTimelineData,\n  netlog: getNetLogData,\n  chrometrace: getChromeTraceData,\n  console: getConsoleLogData,\n  testinfo: getTestInfo,\n  history: getHistory,\n  googlecsi: getGoogleCsiData,\n  response: getResponseBody,\n  player: getEmbedVideoPlayer,\n  video: createVideo,\n  waterfall: getWaterfallImage,\n  screenshot: getScreenshotImage\n};\n\nmodule.exports = WebPageTest;\n","/home/travis/build/npmtest/node-npmtest-webpagetest/node_modules/webpagetest/lib/specs.js":"/**\n * Copyright (c) 2013, Twitter Inc.\n * Copyright (c) 2015, Google Inc.\n * Copyright (c) 2015, Marcel Duran and other contributors\n * Released under the MIT License\n */\n\nvar fs = require('fs'),\n    Mocha = require('mocha'),\n    assert = require('assert');\n\nfunction buildSuite(defaults, tests) {\n  describe(defaults.suiteName || 'WebPageTest', function() {\n    tests.forEach(function(test) {\n      it(test.text, function() {\n        if (test.result instanceof Error) {\n          return assert.ifError(test.result);\n        }\n        assert(test.result);\n      });\n    });\n  });\n}\n\nfunction parseSpecs(data) {\n  var specs;\n\n  // already an object\n  if (typeof data === 'object') {\n    return data;\n  }\n\n  // from file\n  if (fs.existsSync(data) && fs.statSync(data).isFile()) {\n    data = fs.readFileSync(data, 'utf8');\n  }\n\n  // from string\n  try {\n    specs = JSON.parse(data);\n  } catch (e) {\n    return new Error('SpecsParserError: ' + e.message);\n  }\n\n  return specs;\n}\n\nfunction buildTest(metric, spec, actual, defaults) {\n  var operation, expected, result, text;\n\n  // text\n  text = defaults.text || spec.text ||\n    '{metric}: {actual} should be {operation} {expected}';\n\n  // operation\n  if (typeof spec !== 'object') {\n    operation = defaults.operation || '<';\n    expected = spec;\n  } else {\n    if ('max' in spec) {\n      operation = '<';\n      expected = spec.max;\n    }\n    if ('min' in spec) {\n      if (!operation) {\n        operation = '>';\n        expected = spec.min;\n      } else {\n        operation = '<>';\n        expected = [spec.max, spec.min];\n      }\n    }\n  }\n\n  // test\n  switch (operation) {\n    case '<':\n      result = actual < expected;\n      operation = 'less than';\n      break;\n    case '>':\n      result = actual > expected;\n      operation = 'greater than';\n      break;\n    case '<>':\n      result = actual < expected[0] && actual > expected[1];\n      operation = 'less than ' + expected[0] + ' and greater than';\n      expected = expected[1];\n      break;\n    default:\n      result = actual === expected;\n      operation = 'equal to';\n  }\n\n  // result\n  text = text\n    .replace('{metric}', metric)\n    .replace('{actual}', actual)\n    .replace('{operation}', operation)\n    .replace('{expected}', expected);\n\n  return {text: text, result: result};\n}\n\nfunction specsRunner(specs, reporter, callback, err, data) {\n  var defaults = {},\n      tests = [],\n      path = [];\n\n  // bail if test not complete\n  if (!err && (!data || data.statusCode !== 200)) {\n    return callback(err, data);\n  }\n\n  function traverse(specs, data) {\n    Object.keys(specs).forEach(function(key) {\n      // bail on default\n      if (key === 'defaults' && !path.length) {\n        return;\n      }\n\n      path.push(key);\n      if (data[key] === undefined || data[key] === null) {\n        tests.push({\n          text: path.join('.'),\n          result: new Error('not found')\n        });\n        path.pop();\n        return;\n      }\n\n      var spec = specs[key];\n      if (typeof spec === 'object' && !spec.min && !spec.max) {\n        traverse(spec, data[key]);\n      } else if(typeof spec === 'number' && Array.isArray(data[key])) {\n          tests.push(\n            buildTest(path.join('.'), spec, data[key].length, defaults));\n          path.pop();\n      } else {\n        tests.push(buildTest(path.join('.'), spec, data[key], defaults));\n        path.pop();\n      }\n    });\n  }\n\n  // parse specs\n  specs = parseSpecs(specs);\n\n  // error handling\n  if (specs instanceof Error) {\n    err = err || specs;\n  } else if (!(data && data.data)) {\n    err = err || new Error('no data');\n  }\n\n  if (err) {\n    tests.push({text: err.message, result: err});\n  } else {\n    defaults = specs.defaults || {};\n    traverse(specs, data.data);\n  }\n\n  // run mocha suite\n  var mocha = new Mocha({reporter: reporter});\n  mocha.suite.emit('pre-require', global, null, mocha);\n  buildSuite(defaults, tests);\n  mocha.run(callback || function(failures) {\n    process.exit(failures);\n  });\n}\n\nmodule.exports = specsRunner;\n","/home/travis/build/npmtest/node-npmtest-webpagetest/node_modules/webpagetest/lib/helper.js":"/**\n * Copyright (c) 2013, Twitter Inc.\n * Copyright (c) 2015, Google Inc.\n * Copyright (c) 2015, Marcel Duran and other contributors\n * Released under the MIT License\n */\n\nvar xml2js   = require('xml2js'),\n    url      = require('url'),\n    os       = require('os'),\n    csv      = require('csv'),\n    entities = require('entities');\n\nvar parser = new xml2js.Parser({explicitArray: false, mergeAttrs: true});\n\nvar reNumber = /^[\\.\\+\\-]?[\\d\\.]+$/,\n    reInvalidDec = /(?:\\.\\d*){2,}/,\n    reDec = /\\./,\n    reLineBreak = /[\\n\\r]+/g,\n    reLastBreak = /\\n$/,\n    reProtocol = /^https?:\\/\\//i,\n    reIp = /\\d+\\.\\d+\\.\\d+\\.\\d+/, // 127.0.0.1\n\n    TAB = '\\t',\n    NEWLINE = '\\n';\n\nfunction parseNumber(s) {\n  if (typeof s !== 'string' || !reNumber.test(s) || reInvalidDec.test(s)) {\n    return s;\n  }\n\n  return reDec.test(s) ? parseFloat(s, 10) : parseInt(s, 10);\n}\n\nfunction normalizeObj(root) {\n  if (typeof root === 'object') {\n    Object.keys(root).forEach(function(key) {\n      var value = root[key];\n      if (typeof value === 'string') {\n        if (value.length === 0 || value === '\\n') {\n          delete root[key];\n        } else {\n          root[key] = parseNumber(value);\n        }\n      } else {\n        normalizeObj(value);\n      }\n    });\n  }\n}\n\nfunction xmlToObj(xml, callback) {\n  parser.parseString(xml, function (err, obj) {\n    if (err) {\n      callback(err);\n    }\n\n    normalizeObj(obj);\n    callback(undefined, obj);\n  });\n}\n\nfunction svToObj(delimiter, headers, sv) {\n  var data,\n      start = 0,\n      obj = {};\n\n  delimiter = delimiter || ',';\n\n  if (!sv) {\n    return {};\n  }\n\n  sv = sv.toString();\n  // keep line breaks consistent as \"\\n\" and remove the very last one\n  data = sv.replace(reLineBreak, '\\n').replace(reLastBreak, '').split('\\n');\n\n  if (!headers) {\n    headers = data[0].split(delimiter);\n    start = 1;\n  }\n\n  // edge case: when response provides headers, 1st 2 rows should be ignored\n  if (data[0].split(delimiter)[3] === 'IP Address') {\n    start = 2;\n  }\n\n  headers.forEach(function headersEach(header) {\n    obj[header] = [];\n  });\n\n  data.slice(start).forEach(function dataEach(row) {\n    row.split(delimiter).forEach(function rowEach(value, index) {\n      if (headers[index]) {\n        obj[headers[index]].push(parseNumber(value));\n      }\n    });\n  });\n\n  return obj;\n}\n\nfunction csvParser(data, callback) {\n  csv.parse(data.toString(), { columns: true }, function(err, data) {\n    if (err) {\n      callback.bind(this, err);\n    }\n    csv.transform(data, function(row) {\n      var key, value;\n      for (key in row) {\n        value = row[key].replace(/<b>|<\\/b>/g, '');\n        row[key] = entities.decode(value, 2);\n      }\n      return row;\n    }, callback.bind(this));\n  });\n}\ncsvParser.async = true;\n\n// Net log has a buggy end of file, attempt to fix\nfunction netLogParser(data) {\n  data = (data || '{}').toString();\n  if (data.slice(data.length - 3) === ',\\r\\n') {\n    data = data.slice(0, data.length - 3) + ']}';\n  }\n\n  return JSON.parse(data);\n}\n\n// Convert image (binary) into data URI (string)\nfunction dataURI(data) {\n  return new Buffer(data || '', 'binary').toString('base64');\n}\n\n// Convert script objects into formatted string\nfunction scriptToString(data) {\n  var script = [];\n\n  data.forEach(function dataEach(step) {\n    var key, value;\n\n    if (typeof step === 'string') {\n      script.push(step);\n    } else if (typeof step === 'object') {\n      key = [Object.keys(step)[0]];\n      value = step[key];\n      if (value !== undefined && value !== null && value !== '') {\n        key = key.concat(value);\n      }\n      script.push(key.join(TAB));\n    }\n  });\n\n  return script.join(NEWLINE);\n}\n\n// Build the RESTful API url call only\nfunction dryRun(config, path) {\n  path = url.parse(path, true);\n\n  return {\n    url: url.format({\n      protocol: config.protocol,\n      hostname: config.hostname,\n      port: (config.port !== 80 && config.port !== 443 ?\n        config.port : undefined),\n      pathname: path.pathname,\n      query: path.query\n    })\n  };\n}\n\n// Normalize server config\nfunction normalizeServer(server) {\n  // normalize hostname\n  if (!reProtocol.test(server)) {\n    server = 'http://' + server;\n  }\n  server = url.parse(server);\n\n  return {\n    protocol: server.protocol,\n    hostname: server.hostname,\n    auth: server.auth,\n    pathname: server.pathname,\n    port: parseInt(server.port, 10) || (server.protocol === 'https:' ? 443 : 80)\n  };\n}\n\n// Normalize localhost and port\nfunction localhost(local, defaultPort) {\n  // edge case when hostname:port is not informed via cli\n  if (local === undefined || local === 'true') {\n    local = [defaultPort];\n  } else {\n    local = local.toString().split(':');\n  }\n\n  return {\n    hostname: reIp.test(local[0]) || isNaN(parseInt(local[0], 10)) &&\n      local[0] ? local[0] : os.hostname(),\n    port: parseInt(local[1] || (!reIp.test(local[0]) && local[0]), 10) ||\n      defaultPort\n  };\n}\n\n// Custom API response Error\nfunction WPTAPIError(code, message) {\n  this.name = 'WPTAPIError';\n  this.code = code || 0;\n  this.message = message || this.name;\n}\nWPTAPIError.prototype = new Error();\nWPTAPIError.prototype.constructor = WPTAPIError;\n\n// Set valid parameter in query\nfunction setQuery(map, options, query) {\n  query = query || {};\n  options = options || {};\n\n  map.options.forEach(function eachOpts(opt) {\n    Object.keys(opt).forEach(function eachOpt(key) {\n      var param = opt[key],\n          name = param.name,\n          value = options[name] || options[key];\n\n      if (value !== undefined && param.api) {\n        if (param.array) {\n          value = [].concat(value).join(' ');\n        }\n        query[param.api] = param.bool ? param.invert ?\n          (value ? 0 : 1) : (value ? 1 : 0) : value;\n      }\n    });\n  });\n\n  return query;\n}\n\nmodule.exports = {\n  xmlToObj: xmlToObj,\n  csvToObj: svToObj.bind(null, ',', false),\n  tsvToObj: svToObj.bind(null, '\\t'),\n  csvParser: csvParser,\n  netLogParser: netLogParser,\n  scriptToString: scriptToString,\n  dataURI: dataURI,\n  dryRun: dryRun,\n  normalizeServer: normalizeServer,\n  localhost: localhost,\n  setQuery: setQuery,\n  WPTAPIError: WPTAPIError\n};\n","/home/travis/build/npmtest/node-npmtest-webpagetest/node_modules/webpagetest/lib/server.js":"/**\n * Copyright (c) 2013, Twitter Inc.\n * Copyright (c) 2015, Google Inc.\n * Copyright (c) 2015, Marcel Duran and other contributors\n * Released under the MIT License\n */\n\nvar https   = require('https'),\n    http    = require('http'),\n    path    = require('path'),\n    url     = require('url'),\n    fs      = require('fs'),\n    mapping = require('./mapping');\n\nvar help = {};\n\nfunction normalizeRequest(uri) {\n  var idx,\n      parsed = url.parse(uri, true),\n      pathname = path.join(parsed.pathname, '/');\n\n  pathname = pathname.slice(1, pathname.length - 1);\n  idx = pathname.lastIndexOf('/');\n  idx = (idx < 0 ? pathname.length : idx);\n\n  return {\n    command: pathname.slice(0, idx).toLowerCase(),\n    id: pathname.slice(idx + 1),\n    query: parsed.query\n  };\n}\n\nfunction output(callback, err, data, info) {\n  var code = 200,\n      type = 'application/json;charset=utf-8';\n\n  if (err) {\n    data = {error: err};\n    code = err.code || code;\n  } else if (info) {\n    if (info.encoding === 'binary') {\n      data = new Buffer(data, 'binary');\n      type = info.type;\n    } else {\n      data = {type: info.type, data: data};\n    }\n  }\n\n  if (!(data instanceof Buffer)) {\n    try {\n      data = JSON.stringify(data, null, 2);\n    } catch (ex) {\n      data = JSON.stringify({\n        data: data.toString(),\n        error: ex.message\n      }, null, 2);\n    }\n    if (callback) {\n      type = 'application/javascript;charset=utf-8';\n      data = callback + '(' + data + ');';\n    }\n  }\n\n  this.writeHead(code, {'Content-Type': type});\n  this.end(data);\n}\n\nfunction buildHelp(defaultServer) {\n  Object.keys(mapping.commands).forEach(function eachCommand(key) {\n    var name,\n        options = {},\n        opts = [mapping.options.common],\n        method = mapping.commands[key];\n\n    if (key === 'listen') {\n      return;\n    }\n\n    name = [\n      key,\n      method.param ? [\n        '/',\n        method.optional ? '[' : '<',\n        method.param,\n        method.optional ? ']' : '>'\n      ].join('') : '',\n      method.options ? '?[options]' : ''\n    ].join('');\n\n    if (method.options) {\n      opts = opts.concat(method.options);\n    }\n    opts.forEach(function eachOptions(option) {\n      var nokey = method.nokey && method.nokey.indexOf(option) > -1;\n\n      Object.keys(option).forEach(function eachOption(optKey) {\n        var opt = option[optKey];\n\n        // ignore shorthands\n        if (optKey === opt.key) {\n          return;\n        }\n\n        options[[\n          opt.key && !nokey ? opt.key + ', ' : '',\n          optKey\n        ].join('')] = optKey === 'server' ?\n          opt.info.replace('%s', defaultServer) : opt.info;\n      });\n    });\n\n    help[name] = {\n      description: method.info,\n      options: options\n    };\n  });\n\n  help = {help: help};\n}\n\nfunction route(req, res) {\n  var uri = normalizeRequest(req.url),\n      method = (mapping.commands[uri.command] || {}).name,\n      args = [],\n      callback = uri.query.callback || uri.query.cb;\n\n  if (method && method !== 'listen') {\n    // id, url or script\n    if (uri.id) {\n      args.push(decodeURIComponent(uri.id));\n    }\n\n    // options\n    args.push(mapping.setOptions(uri.command, uri.query));\n\n    // callback\n    args.push(output.bind(res, callback));\n\n    this[method].apply(this, args);\n  } else {\n    // help\n    output.call(res, callback, null, help);\n  }\n}\n\nmodule.exports = {\n  listen: function listen(local, options, callback) {\n    var server;\n\n    if (fs.existsSync(options.key) && fs.existsSync(options.cert)) {\n      server = https.createServer({\n        key: fs.readFileSync(path.resolve(process.cwd(), options.key)),\n        cert: fs.readFileSync(path.resolve(process.cwd(), options.cert))\n      }, route.bind(this));\n    } else {\n      server = http.createServer(route.bind(this));\n    }\n\n    server.on('error', function listenError(err) {\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    }).on('listening', function listenError() {\n      if (typeof callback === 'function') {\n        callback(undefined, {\n          server: server,\n          protocol: server instanceof https.Server ? 'https' : 'http',\n          hostname: local.hostname,\n          port: local.port,\n          url: url.format({\n            protocol: server instanceof https.Server ? 'https' : 'http',\n            hostname: local.hostname,\n            port: local.port\n          })\n        });\n      }\n    }).listen(local.port);\n\n    buildHelp(url.format(this.config.hostname));\n\n    return server;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-webpagetest/node_modules/webpagetest/lib/mapping.js":"/**\n * Copyright (c) 2013, Twitter Inc.\n * Copyright (c) 2015, Google Inc.\n * Copyright (c) 2015, Marcel Duran and other contributors\n * Released under the MIT License\n */\n\nvar reBool = /^0|false|no|off$/i;\n\nvar options = {\n  common: {\n    'server': {\n      name: 'server',\n      key: 's',\n      param: 'server',\n      info: 'the WPT server URL [%s]'\n    },\n    'dryrun': {\n      name: 'dryRun',\n      key: 'd',\n      bool: true,\n      info: 'just return the RESTful API URL'\n    }\n  },\n  test: {\n    'location': {\n      name: 'location',\n      key: 'l',\n      api: 'location',\n      param: 'location',\n      info: 'location to test from'\n    },\n\n    // Test Setting tab\n    'connectivity': {\n      name: 'connectivity',\n      key: 'y',\n      api: 'connectivity',\n      param: 'profile',\n      info: 'connectivity profile (Cable|DSL|FIOS|Dial|3G|3GFast|Native|custom) [Cable]'\n    },\n    'runs': {\n      name: 'runs',\n      key: 'r',\n      api: 'runs',\n      param: 'number',\n      info: 'number of test runs [1]'\n    },\n    'first': {\n      name: 'firstViewOnly',\n      key: 'f',\n      api: 'fvonly',\n      bool: true,\n      info: 'skip the Repeat View test'\n    },\n    'video': {\n      name: 'video',\n      key: 'v',\n      api: 'video',\n      bool: true,\n      info: 'capture video'\n    },\n    'private': {\n      name: 'private',\n      key: 'p',\n      api: 'private',\n      bool: true,\n      info: 'keep the test hidden from the test log'\n    },\n    'label': {\n      name: 'label',\n      key: 'L',\n      api: 'label',\n      param: 'label',\n      info: 'label for the test'\n    },\n\n    // Advanced tab\n    'onload': {\n      name: 'stopAtDocumentComplete',\n      key: 'i',\n      api: 'web10',\n      bool: true,\n      info: 'stop test at document complete. typically, tests run until all activity stops'\n    },\n    'noscript': {\n      name: 'disableJavaScript',\n      key: 'S',\n      api: 'noscript',\n      bool: true,\n      info: 'disable javascript (IE, Chrome, Firefox)'\n    },\n    'clearcerts': {\n      name: 'clearCerts',\n      key: 'C',\n      api: 'clearcerts',\n      bool: true,\n      info: 'clear SSL certificate caches'\n    },\n    'ignoressl': {\n      name: 'ignoreSSL',\n      key: 'R',\n      api: 'ignoreSSL',\n      bool: true,\n      info: 'ignore SSL certificate errors, e.g. name mismatch, self-signed certificates, etc'\n    },\n    'standards': {\n      name: 'disableCompatibilityView',\n      key: 'T',\n      api: 'standards',\n      bool: true,\n      info: 'forces all pages to load in standards mode (IE only)'\n    },\n    'tcpdump': {\n      name: 'tcpDump',\n      key: 'u',\n      api: 'tcpdump',\n      bool: true,\n      info: 'capture network packet trace (tcpdump)'\n    },\n    'bodies': {\n      name: 'saveResponseBodies',\n      key: 'O',\n      api: 'bodies',\n      bool: true,\n      info: 'save response bodies for text resources'\n    },\n    'keepua': {\n      name: 'keepOriginalUserAgent',\n      key: 'K',\n      api: 'keepua',\n      bool: true,\n      info: 'do not add PTST to the original browser User Agent string'\n    },\n    'dom': {\n      name: 'domElement',\n      key: 'm',\n      api: 'domelement',\n      param: 'element',\n      info: 'DOM element to record for sub-measurement'\n    },\n    'duration': {\n      name: 'minimumDuration',\n      key: 'N',\n      api: 'time',\n      param: 'seconds',\n      info: 'minimum test duration in seconds'\n    },\n    'tester': {\n      name: 'tester',\n      key: 'E',\n      api: 'tester',\n      param: 'name',\n      info: 'run the test on a specific PC (name must match exactly or the test will not run)'\n    },\n\n    // Chrome tab\n    'mobile': {\n      name: 'emulateMobile',\n      key: 'W',\n      api: 'mobile',\n      bool: true,\n      info: '(experimental) emulate mobile browser: Chrome mobile user agent, 640x960 screen, 2x scaling and fixed viewport (Chrome only)'\n    },\n    'timeline': {\n      name: 'timeline',\n      key: 'M',\n      api: 'timeline',\n      bool: true,\n      info: 'capture Developer Tools Timeline (Chrome only)'\n    },\n    'callstack': {\n      name: 'timelineCallStack',\n      key: 'J',\n      api: 'timelineStack',\n      bool: true,\n      info: 'set between 1-5 to include the JS call stack. must be used in conjunction with timeline (increases overhead) (Chrome only)',\n      valid: /[1-5]/\n    },\n    'chrometrace': {\n      name: 'chromeTrace',\n      key: 'q',\n      api: 'trace',\n      bool: true,\n      info: 'capture chrome trace (about://tracing) (Chrome only)'\n    },\n    'netlog': {\n      name: 'netLog',\n      key: 'G',\n      api: 'netlog',\n      bool: true,\n      info: 'capture Network Log (Chrome only)'\n    },\n    'datareduction': {\n      name: 'dataReduction',\n      key: 'Q',\n      api: 'dataReduction',\n      bool: true,\n      info: 'enable data reduction on Chrome 34+ Android (Chrome only)'\n    },\n    'useragent': {\n      name: 'userAgent',\n      key: 'x',\n      api: 'uastring',\n      param: 'string',\n      info: 'custom user agent string (Chrome only)'\n    },\n    'cmdline': {\n      name: 'commandLine',\n      key: 'X',\n      api: 'cmdline',\n      param: 'switches',\n      info: 'use a list of custom command line switches (Chrome only)'\n    },\n\n    // Auth tab\n    'login': {\n      name: 'login',\n      key: 'g',\n      api: 'login',\n      param: 'username',\n      info: 'username for authenticating tests (http authentication)'\n    },\n    'password': {\n      name: 'password',\n      key: 'w',\n      api: 'password',\n      param: 'password',\n      info: 'password for authenticating tests (http authentication)'\n    },\n\n    // Script tab\n    'sensitive': {\n      name: 'sensitive',\n      key: 't',\n      api: 'sensitive',\n      bool: true,\n      info: 'discard script and http headers in the result'\n    },\n    'noheaders': {\n      name: 'disableHTTPHeaders',\n      key: 'H',\n      api: 'noheaders',\n      bool: true,\n      info: 'disable saving of the http headers (as well as browser status messages and CPU utilization)'\n    },\n\n    // Block tab\n    'block': {\n      name: 'block',\n      key: 'b',\n      api: 'block',\n      param: 'urls',\n      array: true,\n      info: 'space-delimited list of urls to block (substring match)'\n    },\n\n    // SPOF tab\n    'spof': {\n      name: 'spof',\n      key: 'Z',\n      api: 'spof',\n      param: 'domains',\n      array: true,\n      info: 'space-delimited list of domains to simulate failure by re-routing to blackhole.webpagetest.org to silently drop all requests'\n    },\n\n    // Custom tab\n    'custom': {\n      name: 'customMetrics',\n      key: 'c',\n      api: 'custom',\n      param: 'script',\n      info: 'execute arbitrary javascript at the end of a test to collect custom metrics'\n    },\n\n    // API only settings\n    'authtype': {\n      name: 'authenticationType',\n      key: 'a',\n      api: 'authType',\n      param: 'type',\n      info: 'type of authentication: 0 = Basic, 1 = SNS [0]'\n    },\n    'notify': {\n      name: 'notifyEmail',\n      key: 'n',\n      api: 'notify',\n      param: 'e-mail',\n      info: 'e-mail address to notify with the test results'\n    },\n    'pingback': {\n      name: 'pingback',\n      key: 'B',\n      api: 'pingback',\n      param: 'url',\n      info: 'URL to ping when the test is complete (the test ID will be passed as an \"id\" parameter)'\n    },\n    'bwdown': {\n      name: 'bandwidthDown',\n      key: 'D',\n      api: 'bwDown',\n      param: 'bandwidth',\n      info: 'download bandwidth in Kbps (used when specifying a custom connectivity profile)'\n    },\n    'bwup': {\n      name: 'bandwidthUp',\n      key: 'U',\n      api: 'bwUp',\n      param: 'bandwidth',\n      info: 'upload bandwidth in Kbps (used when specifying a custom connectivity profile)'\n    },\n    'latency': {\n      name: 'latency',\n      key: 'Y',\n      api: 'latency',\n      param: 'time',\n      info: 'first-hop Round Trip Time in ms (used when specifying a custom connectivity profile)'\n    },\n    'plr': {\n      name: 'packetLossRate',\n      key: 'P',\n      api: 'plr',\n      param: 'percentage',\n      info: 'packet loss rate - percent of packets to drop (used when specifying a custom connectivity profile)'\n    },\n    'noopt': {\n      name: 'disableOptimization',\n      key: 'z',\n      api: 'noopt',\n      bool: true,\n      info: 'disable optimization checks (for faster testing)'\n    },\n    'noimages': {\n      name: 'disableScreenshot',\n      key: 'I',\n      api: 'noimages',\n      bool: true,\n      info: 'disable screen shot capturing'\n    },\n    'full': {\n      name: 'fullResolutionScreenshot',\n      key: 'F',\n      api: 'pngss',\n      bool: true,\n      info: 'save a full-resolution version of the fully loaded screen shot as a PNG'\n    },\n    'jpeg': {\n      name: 'jpegQuality',\n      key: 'j',\n      api: 'iq',\n      param: 'level',\n      info: 'jpeg compression level (30-100) for the screen shots and video capture'\n    },\n    'medianvideo': {\n      name: 'medianVideo',\n      key: 'A',\n      api: 'mv',\n      bool: true,\n      info: 'store the video from the median run when capturing video is enabled'\n    },\n    'htmlbody': {\n      name: 'htmlBody',\n      api: 'htmlbody',\n      bool: true,\n      info: 'save the content of only the base HTML response'\n    },\n    'tsview': {\n      name: 'tsView',\n      api: 'tsview_id',\n      param: 'id',\n      info: 'test name to use when submitting results to tsviewdb (for private instances that have integrated with tsviewdb)'\n    },\n    'tsviewconfigs': {\n      name: 'tsViewConfigs',\n      api: 'tsview_configs',\n      param: 'string',\n      info: 'configs to use when submitting results to tsviewdb (for private instances that have integrated with tsviewdb)'\n    },\n    'affinity': {\n      name: 'affinity',\n      api: 'affinity',\n      param: 'string',\n      info: 'string to hash test to a specific test agent. tester will be picked by index among available testers'\n    },\n    'priority': {\n      name: 'priority',\n      api: 'priority',\n      param: 'number',\n      info: 'change test priority (0-9) [enforced by API key, otherwise 5]',\n      valid: /^\\d$/\n    },\n    // Undocumented/experimental/transitent/deprecated\n    'noads': {\n      name: 'blockAds',\n      api: 'blockads',\n      bool: true,\n      info: 'block ads defined by adblockrules.org'\n    },\n    'continuous': {\n      name: 'continuousVideoCapture',\n      api: 'continuousVideo',\n      bool: true,\n      info: 'capture video continuously (unstable/experimental, may cause tests to fail)'\n    },\n    'spdy3': {\n      name: 'forceSpdy3',\n      api: 'spdy3',\n      bool: true,\n      info: 'force SPDY version 3 (Chrome only)'\n    },\n    'swrender': {\n      name: 'forceSoftwareRendering',\n      api: 'swrender',\n      bool: true,\n      info: 'force software rendering, disable GPU acceleration (Chrome only)'\n    },\n\n    // Synchonous tests + results\n    'poll': {\n      name: 'pollResults',\n      param: 'interval',\n      optional: true,\n      info: 'poll for results after test is scheduled at every <interval> seconds [5]'\n    },\n    'wait': {\n      name: 'waitResults',\n      param: 'hostname:port',\n      optional: true,\n      info: 'wait for test results informed by agent once complete listening on <hostname>:<port> [hostname:first port available above 8000]'\n    },\n    'timeout': {\n      name: 'timeout',\n      param: 'seconds',\n      info: 'timeout for polling and waiting results [no timeout]'\n    }\n  },\n  request: {\n    'request': {\n      name: 'requestId',\n      key: 'e',\n      api: 'r',\n      param: 'id',\n      info: 'echo request ID, useful to track asynchronous requests'\n    }\n  },\n  run: {\n    'run': {\n      name: 'run',\n      key: 'r',\n      param: 'number',\n      info: 'which run number on a multiple runs test [1]'\n    },\n    'cached': {\n      name: 'repeatView',\n      key: 'c',\n      bool: true,\n      info: 'get the Repeat View (cached view) instead of default First View (primed cache)'\n    }\n  },\n  image: {\n    'thumbnail': {\n      name: 'thumbnail',\n      key: 't',\n      bool: true,\n      info: 'get the thumbnail of actual image'\n    },\n    'uri': {\n      name: 'dataURI',\n      key: 'u',\n      bool: true,\n      info: 'return the base64 string representation (inline) of actual image'\n    }\n  },\n  screenshot: {\n    'full': {\n      name: 'fullResolution',\n      key: 'f',\n      bool: true,\n      info: 'get full resolution screenshot in PNG format if available'\n    },\n    'render': {\n      name: 'startRender',\n      key: 'n',\n      bool: true,\n      info: 'get the page screenshot at the Start Render point (i.e.: when something was first displayed on screen)'\n    },\n    'complete': {\n      name: 'documentComplete',\n      key: 'p',\n      bool: true,\n      info: 'get the page screenshot at the Document Complete point (i.e.: when window.onload was fired)'\n    }\n  },\n  results: {\n    'breakdown': {\n      name: 'breakDown',\n      key: 'b',\n      api: 'breakdown',\n      bool: true,\n      info: 'include the breakdown of requests and bytes by mime type'\n    },\n    'domains': {\n      name: 'domains',\n      key: 'D',\n      api: 'domains',\n      bool: true,\n      info: 'include the breakdown of requests and bytes by domain'\n    },\n    'pagespeed': {\n      name: 'pageSpeed',\n      key: 'p',\n      api: 'pagespeed',\n      bool: true,\n      info: 'include the PageSpeed score in the response (may be slower)'\n    },\n    'requests': {\n      name: 'requests',\n      key: 'R',\n      api: 'requests',\n      bool: true,\n      info: 'include the request data in the response (slower and results in much larger responses)'\n    },\n    'median': {\n      name: 'medianMetric',\n      key: 'm',\n      api: 'medianMetric',\n      param: 'metric',\n      info: 'set the metric used to calculate median for multiple runs tests [loadTime]'\n    },\n    'medianrun': {\n      name: 'medianRun',\n      api: 'medianRun',\n      param: 'metric',\n      info: 'set the run used for median for multiple runs tests [median]'\n    },\n    'specs': {\n      name: 'specs',\n      key: 'S',\n      param: 'json_or_file',\n      info: 'set the specs for performance test suite'\n    },\n    'reporter': {\n      name: 'reporter',\n      key: 'r',\n      param: 'name',\n      info: 'set performance test suite reporter output: [dot]|spec|tap|xunit|list|progress|min|nyan|landing|json|doc|markdown|teamcity',\n      valid: /^(?:dot|spec|tap|xunit|list|progress|min|nyan|landing|json|doc|markdown|teamcity)$/\n    }\n  },\n  waterfall: {\n    'type': {\n      name: 'chartType',\n      api: 'type',\n      key: 'T',\n      param: 'chart',\n      info: 'set the chart type: waterfall or connection [waterfall]'\n    },\n    'mime': {\n      name: 'colorByMime',\n      api: 'mime',\n      key: 'M',\n      bool: true,\n      info: 'set chart coloring by MIME type [false]'\n    },\n    'width': {\n      name: 'chartWidth',\n      api: 'width',\n      key: 'w',\n      param: 'px',\n      info: 'chart image width in px (300-2000) [930]'\n    },\n    'max': {\n      name: 'maxTime',\n      api: 'max',\n      key: 'm',\n      param: 'seconds',\n      info: 'set maximum time in seconds [automatic]'\n    },\n    'requests': {\n      name: 'requests',\n      api: 'requests',\n      key: 'R',\n      param: 'items',\n      info: 'filter requests (e.g.:1,2,3,4-9,8) [all]'\n    },\n    'nocpu': {\n      name: 'noCPU',\n      api: 'cpu',\n      key: 'C',\n      bool: true,\n      invert: true,\n      info: 'hide CPU utilization [false]'\n    },\n    'nobandwidth': {\n      name: 'noBandwidth',\n      api: 'bw',\n      key: 'b',\n      bool: true,\n      invert: true,\n      info: 'hide bandwidth utilization [false]'\n    },\n    'noellipsis': {\n      name: 'noEllipsis',\n      api: 'dots',\n      key: 'i',\n      bool: true,\n      invert: true,\n      info: 'hide ellipsis (...) for missing items [false]'\n    },\n    'nolabels': {\n      name: 'noLabels',\n      api: 'labels',\n      key: 'l',\n      bool: true,\n      invert: true,\n      info: 'hide labels for requests (URL) [false]'\n    }\n  },\n  'apikey': {\n    'key': {\n      name: 'key',\n      key: 'k',\n      api: 'k',\n      param: 'api_key',\n      info: 'API key (if assigned). Contact the WebPageTest server administrator for a key if required'\n    }\n  },\n  'video': {\n    'end': {\n      name: 'comparisonEndPoint',\n      key: 'e',\n      api: 'end',\n      param: 'end_point',\n      info: 'frame comparison end point: [visual]=visually complete | all=last change | doc=document complete | full=fully loaded',\n      valid: /^(?:visual|all|doc|full)$/\n    }\n  },\n  'response': {\n    'request': {\n      name: 'request',\n      api: 'request',\n      key: 'R',\n      param: 'number',\n      info: 'the request number [1]'\n    }\n  },\n  'listen': {\n    'key': {\n      name: 'key',\n      key: 'k',\n      param: 'file',\n      info: 'private key file to use for SSL'\n    },\n    'cert': {\n      name: 'cert',\n      key: 'c',\n      param: 'file',\n      info: 'public x509 certificate file to use for SSL'\n    }\n  }\n};\n\nvar commands = {\n  'status': {\n    name: 'getTestStatus',\n    param: 'id',\n    options: [options.request],\n    info: 'check test status'\n  },\n  'results': {\n    name: 'getTestResults',\n    param: 'id',\n    options: [options.results, options.request],\n    info: 'get test results'\n  },\n  'locations': {\n    name: 'getLocations',\n    options: [options.request],\n    info: 'list locations and the number of pending tests'\n  },\n  'testers': {\n    name: 'getTesters',\n    options: [options.request],\n    info: 'list testers status and details'\n  },\n  'test': {\n    name: 'runTest',\n    param: 'url_or_script',\n    options: [options.apikey, options.test, options.request, options.results],\n    info: 'run test',\n    nokey: [options.results]\n  },\n  'cancel': {\n    name: 'cancelTest',\n    param: 'id',\n    options: [options.apikey],\n    info: 'cancel running/pending test'\n  },\n  'har': {\n    name: 'getHARData',\n    param: 'id',\n    info: 'get the HTTP Archive (HAR) from test'\n  },\n  'pagespeed': {\n    name: 'getPageSpeedData',\n    param: 'id',\n    options: [options.run],\n    info: 'get the Google Page Speed results (if available) from test'\n  },\n  'utilization': {\n    name: 'getUtilizationData',\n    param: 'id',\n    options: [options.run],\n    info: 'get the CPU, bandwidth and memory utilization data from test'\n  },\n  'request': {\n    name: 'getRequestData',\n    param: 'id',\n    options: [options.run],\n    info: 'get the request data from test'\n  },\n  'timeline': {\n    name: 'getTimelineData',\n    param: 'id',\n    options: [options.run],\n    info: 'get the Chrome Developer Tools Timeline data (if available) from test'\n  },\n  'netlog': {\n    name: 'getNetLogData',\n    param: 'id',\n    options: [options.run],\n    info: 'get the Chrome Developer Tools Net log data (if available) from test'\n  },\n  'chrometrace': {\n    name: 'getChromeTraceData',\n    param: 'id',\n    options: [options.run],\n    info: 'get the Chrome Trace data (if available) from test'\n  },\n  'console': {\n    name: 'getConsoleLogData',\n    param: 'id',\n    options: [options.run],\n    info: 'get the browser console log data (if available) from test'\n  },\n  'testinfo': {\n    name: 'getTestInfo',\n    param: 'id',\n    info: 'get test request info/details'\n  },\n  'history': {\n    name: 'getHistory',\n    param: 'days',\n    optional: true,\n    info: 'get history of previously run tests'\n  },\n  'googlecsi': {\n    name: 'getGoogleCsiData',\n    param: 'id',\n    options: [options.run],\n    info: 'get Google CSI data (Client Side Instrumentation)'\n  },\n  'response': {\n    name: 'getResponseBody',\n    param: 'id',\n    options: [options.run, options.response],\n    info: 'get response body for text resources'\n  },\n  'waterfall': {\n    name: 'getWaterfallImage',\n    param: 'id',\n    options: [options.run, options.image, options.waterfall],\n    info: 'get the waterfall PNG image'\n  },\n  'screenshot': {\n    name: 'getScreenshotImage',\n    param: 'id',\n    options: [options.run, options.image, options.screenshot],\n    info: 'get the fully loaded page screenshot in JPG format (PNG if in full resolution)'\n  },\n  'video': {\n    name: 'createVideo',\n    param: 'tests',\n    options: [options.video],\n    info: 'create a video from <tests> (comma separated test ids)'\n  },\n  'player': {\n    name: 'getEmbedVideoPlayer',\n    param: 'id',\n    info: 'get a html5 player for a video <id>'\n  },\n  'listen': {\n    name: 'listen',\n    param: 'hostname:port',\n    optional: true,\n    options: [options.listen],\n    info: 'start webpagetest-api proxy server on <hostname>:<port> [hostname:%s]'\n  }\n};\n\n// add options shorthands by referrencing flag through key\nObject.keys(options).forEach(function eachType(type) {\n  Object.keys(options[type]).forEach(function eachOption(option) {\n    var obj = options[type][option];\n    if (obj.key) {\n      options[type][obj.key] = obj;\n    }\n  });\n});\n\n// set valid options only per command\nfunction setOptions(command, query) {\n  var count, opts;\n\n  command = commands[command];\n  if (!command) {\n    return;\n  }\n\n  opts = {};\n  count = Object.keys(query).length;\n\n  [options.common].concat(command.options).some(function someTypes(options) {\n    if (!options) {\n      return;\n    }\n    Object.keys(options).some(function someOptions(key) {\n      var valid = options[key].valid;\n\n      if (query.hasOwnProperty(key)) {\n        if (options[key].bool) {\n          opts[options[key].name] = !reBool.test(query[key]);\n        } else if (!valid || (valid && valid.test(query[key]))) {\n          opts[options[key].name] = decodeURIComponent(query[key]);\n        }\n        count -= 1;\n      }\n\n      return count === 0;\n    });\n\n    return count === 0;\n  });\n\n  return opts;\n}\n\nmodule.exports = {\n  setOptions: setOptions,\n  commands: commands,\n  options: options\n};\n"}